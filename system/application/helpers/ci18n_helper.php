<?php  if (!defined('BASEPATH')) exit('No direct script access allowed');

/**
*	ci18n_helper.php
*	Helper generated by AdgenMaker
*	@author Dante.leonardo
*	@version 0.1 beta
*	@link http://www.leonardopereira.com
*/


if (!function_exists('l')) 
{
	function l()
	{
		$params			= func_get_args();		
		$ci				=& get_instance();
		
		return $ci -> ci18n -> translate($params);
	}
}

if (!class_exists('map'))
{
	class Map {
		
		var $CI;
		var $config;
		var $routes;
		
		public function __construct ()
		{	
			# append CI to my class
			$this -> CI =& get_instance();
			
			$this -> CI -> load -> database();
			$this -> CI -> load -> helper(array('cookie', 'yayparser', 'ci18n'));
			
			$this -> config			= $this -> CI -> load -> config('ci18n');
			
			$this -> initialize();
			
			log_message('debug', 'CI18n Map subclass initialized !');
		}
		
		function initialize()
		{
			$this -> default_language = $this -> CI -> config -> item('default_language', $this -> config);
			$this -> language		= $this -> language();
			
			$this -> routes			= yayparser(file_get_contents(APPPATH."language/ci18n/routes-".$this->language.".yml"));
		}
		
		function language()
		{
			return	!$this -> language ? $this -> default_language : $this -> language;
		}
		
		function __call($method, $params)
		{
			// verify if method is a path, a url or a anchor.
			
			if(substr($method, -5) == "_path") {
				return $this -> path($method, $params);
			}
			elseif(substr($method, -4) == "_url") {
				return $this -> url($method, $params);
			}
			elseif(substr($method, -7) == "_anchor") {
				return $this -> anchor($method, $params);
			}
			else {
				return $this -> $method($params);
			}
			
		}
		
		function path($method, $params)
		{
			$method		= str_replace("_path", "", $method);
			if(is_array($this->routes[$method])) {
				
				$route	 = $this -> _parse_route($method, $params);
				
				return $this -> CI -> config -> item('index_page') . '/' . $route;
				
			} else {
				log_message('error', 'Path $method not found.');
				return false;
			}
		}
		
		function url($method, $params)
		{
			$method		= str_replace("_url", "", $method);
			if(is_array($this->routes[$method])) {
				
				$route	 = $this -> _parse_route($method, $params);
				
				return $this -> CI -> config -> site_url($route);
				
			} else {
				log_message('error', 'URL $method not found.');
				return false;
			}
		}
		
		function anchor($method, $params)
		{
			$method		= str_replace("_anchor", "", $method);
			if(is_array($this->routes[$method])) {
				
				$message = array_shift($params);
				
				$route	 = $this -> _parse_route($method, $params[0]);
				
				$this -> CI -> load -> helper('url');
				
				return anchor($route, $message, $params[1]);
				
			} else {
				log_message('error', 'URL $method not found.');
				return false;
			}
		}
		
		function _parse_route($method, $params)
		{
			$route	= (str_replace(array("(:any)", "(:num)"), array('%s', '%i'), $this->routes[$method]['path']));
			$data[]	= $route;
			foreach($params as $param) { $data[] = $param; }
			$route 	= call_user_func_array('sprintf', $data);
			return $route;
		}
		
	}
	
	/*
		How to use:
		$map -> user_path('dante');
		// return: index.php/user/dante -> to -> index.php/users/profile/dante
		$map -> user_url('dante');
		// return: http://localhost/CIDL/index.php/user/dante -> to -> http://localhost/CIDL/index.php/users/profile/dante
		$map -> user_anchor('Show my Profile', 'dante');
		// return: <a href="http://localhost/CIDL/index.php/user/dante">Show my Profile</a>
	*/
}

/* End of file ci18n_helper.php */
/* Location: ./system/application/helpers/ci18n_helper.php */